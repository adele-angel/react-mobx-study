{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","StoreContext","React","createContext","StoreProvider","children","store","useLocalStore","insects","addInsect","insect","push","removeInsect","index","indexOf","splice","length","Provider","value","InsectHeader","useContext","useObserver","className","src","logo","alt","insectsCount","InsectList","map","key","onClick","e","InsectForm","useState","setInsect","onSubmit","preventDefault","type","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,0LCMrCC,G,MAAeC,IAAMC,iBAIrBC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAKlBC,EAAQC,aAAc,iBAAO,CAClCC,QAAS,CAAC,YAAa,SAAU,UACjCC,UAAW,SAACC,GAGI,KAAXA,GACHJ,EAAME,QAAQG,KAAKD,IAGrBE,aAAc,SAACF,GACd,IAAIG,EAAQP,EAAME,QAAQM,QAAQJ,GAClCJ,EAAME,QAAQO,OAAOF,EAAO,IAI7B,mBACC,OAAOP,EAAME,QAAQQ,YAKvB,OAAO,kBAACf,EAAagB,SAAd,CAAuBC,MAAOZ,GAAQD,IAGxCc,EAAe,WACpB,IAAMb,EAAQJ,IAAMkB,WAAWnB,GAC/B,OAAOoB,aAAY,kBAClB,wBAAIC,UAAU,cACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACxCnB,EAAMoB,aAFR,gBAQIC,EAAa,WAElB,IAAMrB,EAAQJ,IAAMkB,WAAWnB,GAI/B,OAAOoB,aAAY,kBAClB,wBAAIC,UAAU,YACZhB,EAAME,QAAQoB,KAAI,SAAClB,GAAD,OAClB,wBAAImB,IAAKnB,GACR,0BACCoB,QAAS,SAACC,GACTzB,EAAMM,aAAaF,KAFrB,KAMCA,WAOAsB,EAAa,WAClB,IAAM1B,EAAQJ,IAAMkB,WAAWnB,GADP,EAEIC,IAAM+B,SAAS,IAFnB,mBAEjBvB,EAFiB,KAETwB,EAFS,KAIxB,OACC,0BACCZ,UAAU,WACVa,SAAU,SAACJ,GAGVzB,EAAMG,UAAUC,GAEhBwB,EAAU,IACVH,EAAEK,mBAEH,2BACCC,KAAK,OACLnB,MAAOR,EACP4B,SAAU,SAACP,GACVG,EAAUH,EAAEQ,OAAOrB,UAGrB,4BAAQmB,KAAK,UAAb,gBAiBYG,MAZf,WACC,OACC,kBAAC,EAAD,KACC,yBAAKlB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SC9FgBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2171f06d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c31c541e.svg\";","import React from 'react';\nimport { useLocalStore, useObserver } from 'mobx-react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// define context\nconst StoreContext = React.createContext();\n\n// wraps around all the components inside of this app\n// a function receives child components\nconst StoreProvider = ({ children }) => {\n\t// defining a store to store the state inside\n\t// the store contains:\n\t// 1. the state properties - the data we're tracking or observing\n\t// 2. function that will modify those state properties\n\tconst store = useLocalStore(() => ({\n\t\tinsects: ['Centipede', 'Spider', 'Scarab'],\n\t\taddInsect: (insect) => {\n\t\t\t// the state in MobX is mutable\n\t\t\t// MobX observes changes as the state is mutated and keeps track of the changes\n\t\t\tif (insect !== '') {\n\t\t\t\tstore.insects.push(insect);\n\t\t\t}\n\t\t},\n\t\tremoveInsect: (insect) => {\n\t\t\tlet index = store.insects.indexOf(insect);\n\t\t\tstore.insects.splice(index, 1);\n\t\t},\n\t\t// adding computed properties\n\t\t// read-only / getter functions that will compute values derived from the state\n\t\tget insectsCount() {\n\t\t\treturn store.insects.length;\n\t\t},\n\t}));\n\n\t// the context value that's available in any level of the component hierarchy\n\treturn <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\n};\n\nconst InsectHeader = () => {\n\tconst store = React.useContext(StoreContext);\n\treturn useObserver(() => (\n\t\t<h1 className='App-header'>\n\t\t\t<img src={logo} className='App-logo' alt='logo' />\n\t\t\t{store.insectsCount} Insects\n\t\t</h1>\n\t));\n};\n\n// access the store and display data\nconst InsectList = () => {\n\t// React.useContext() - a hook that allows accessing context\n\tconst store = React.useContext(StoreContext);\n\n\t// render out components\n\t// useObserver to observe changes\n\treturn useObserver(() => (\n\t\t<ul className='App-list'>\n\t\t\t{store.insects.map((insect) => (\n\t\t\t\t<li key={insect}>\n\t\t\t\t\t<span\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tstore.removeInsect(insect);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tX\n\t\t\t\t\t</span>\n\t\t\t\t\t{insect}\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t));\n};\n\nconst InsectForm = () => {\n\tconst store = React.useContext(StoreContext);\n\tconst [insect, setInsect] = React.useState('');\n\n\treturn (\n\t\t<form\n\t\t\tclassName='App-form'\n\t\t\tonSubmit={(e) => {\n\t\t\t\t// insect is added to store from:\n\t\t\t\t// const [insect, setInsect] = React.useState('');\n\t\t\t\tstore.addInsect(insect);\n\t\t\t\t// reset local state back to empty string\n\t\t\t\tsetInsect('');\n\t\t\t\te.preventDefault();\n\t\t\t}}>\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tvalue={insect}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tsetInsect(e.target.value);\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<button type='submit'>Add Insect</button>\n\t\t</form>\n\t);\n};\n\nfunction App() {\n\treturn (\n\t\t<StoreProvider>\n\t\t\t<div className='App'>\n\t\t\t\t<InsectHeader />\n\t\t\t\t<InsectList />\n\t\t\t\t<InsectForm />\n\t\t\t</div>\n\t\t</StoreProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}